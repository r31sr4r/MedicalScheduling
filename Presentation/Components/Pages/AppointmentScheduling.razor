@page "/appointment-scheduling"
@inject AppointmentService AppointmentService
@using MedicalScheduling.Application.Services
@using MedicalScheduling.Domain.Entities
@using MudBlazor

<PageTitle>Appointment Scheduling</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h4" Align="Align.Center">Schedule an Appointment</MudText>

    <!-- Dropdown de Médicos -->
    <MudSelect T="int" 
               Label="Select a Doctor" 
               Color="Color.Primary" 
               Dense="true" 
               ValueChanged="OnDoctorSelected" 
               Value="@SelectedDoctorId">
        <MudSelectItem Value="0" Disabled="true">Select a Doctor</MudSelectItem>
        @foreach (var doctor in Doctors)
        {
            <MudSelectItem Value="@doctor.Id">@doctor.Name (@doctor.Specialty)</MudSelectItem>
        }
    </MudSelect>

    <!-- Calendário -->
    @if (SelectedDoctorId > 0)
    {
<MudDatePicker 
    T="DateTime?"
    Date="@SelectedDate"
    DateChanged="OnDateChanged"  // Alteração
    Label="Select a Date"
    Color="Color.Primary"
    MinDate="@MinDate"
    MaxDate="@MaxDate"
    DisableToolbar="false"
    DisabledDates="IsDateDisabled" />
    }

    <!-- Dropdown de Horários -->
    @if (SelectedDate != null && AvailableTimes.Any())
    {
        <MudSelect T="TimeSpan" 
                   Label="Select a Time" 
                   Color="Color.Primary" 
                   Dense="true" 
                   @bind-Value="SelectedTime">
            <MudSelectItem Value="@TimeSpan.Zero" Disabled="true">Select a Time</MudSelectItem>
            @foreach (var time in AvailableTimes)
            {
                <MudSelectItem Value="@time">@time.ToString(@"hh\:mm")</MudSelectItem>
            }
        </MudSelect>
    }

    <!-- Botão para Confirmar -->
    <MudButton Disabled="@(!CanSchedule)" 
               Class="mt-4" 
               Variant="Variant.Filled" 
               Color="Color.Success" 
               OnClick="ScheduleAppointment">
        Schedule Appointment
    </MudButton>
</MudContainer>

@code {
    private List<Doctor> Doctors = new();
    private int SelectedDoctorId = 0;
    private List<DateTime> AvailableDates = new();
    private List<TimeSpan> AvailableTimes = new();
    private DateTime? SelectedDate;
    private TimeSpan SelectedTime;

    private bool CanSchedule => 
        SelectedDoctorId > 0 && 
        SelectedDate != null && 
        SelectedTime != TimeSpan.Zero;

    private DateTime MinDate = DateTime.Today;
    private DateTime MaxDate = DateTime.Today.AddDays(7);

    protected override async Task OnInitializedAsync()
    {
        Doctors = (await AppointmentService.GetDoctorsAsync()).ToList();
    }

    private async Task OnDoctorSelected(int value)
    {
        SelectedDoctorId = value;
        SelectedDate = null;
        AvailableTimes = new List<TimeSpan>();

        var availableDates = await AppointmentService.GetAvailableDatesAsync(SelectedDoctorId);
        AvailableDates = availableDates
            .Select(d => d.Date)
            .Distinct()
            .ToList();

        StateHasChanged();
    }

    private bool IsDateDisabled(DateTime date)
    {
        return !AvailableDates.Contains(date.Date);
    }

    private async Task OnDateChanged(DateTime? date)
    {
        if (date == null || SelectedDoctorId == 0)
        {
            AvailableTimes = new List<TimeSpan>();
            return;
        }

        SelectedDate = date;

        var availableDates = await AppointmentService.GetAvailableDatesAsync(SelectedDoctorId);

        AvailableTimes = availableDates
            .Where(d => d.Date.Date == SelectedDate.Value.Date)
            .Select(d => d.TimeOfDay)
            .Distinct()
            .OrderBy(t => t)
            .ToList();

        StateHasChanged();
    }

    private async Task ScheduleAppointment()
    {
        try
        {
            var appointment = new Appointment
            {
                DoctorId = SelectedDoctorId,
                PatientId = 1, // Simulado para testes
                DateTime = SelectedDate.Value.Date.Add(SelectedTime)
            };

            await AppointmentService.ScheduleAppointment(appointment);
            Console.WriteLine($"Appointment scheduled with Doctor ID: {SelectedDoctorId} on {SelectedDate} at {SelectedTime}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}