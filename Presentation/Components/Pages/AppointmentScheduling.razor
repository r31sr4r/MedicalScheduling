@page "/appointment-scheduling/{appointmentId:int?}"
@inject AppointmentService AppointmentService
@inject PatientService PatientService
@inject ISnackbar Snackbar
@using MedicalScheduling.Application.Services
@using MedicalScheduling.Domain.Entities
@using MudBlazor

<PageTitle>Appointment Scheduling</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h4" Align="Align.Center">Schedule an Appointment</MudText>

    <!-- Email do Paciente -->
    <MudTextField T="string"
                  Label="Enter your Email"
                  @bind-Value="PatientEmail"
                  Placeholder="example@domain.com"
                  Required="true" />

    <MudButton Disabled="@string.IsNullOrWhiteSpace(PatientEmail)"
               Class="mt-4"
               Variant="Variant.Filled"
               Color="Color.Info"
               OnClick="CheckPatient">
        Verify Patient
    </MudButton>

    @if (Patient != null)
    {
        <!-- Dropdown de Médicos -->
        <MudSelect T="int" 
                   Label="Select a Doctor" 
                   Color="Color.Primary" 
                   Dense="true" 
                   ValueChanged="OnDoctorSelected" 
                   Value="@SelectedDoctorId">
            <MudSelectItem Value="0" Disabled="true">Select a Doctor</MudSelectItem>
            @foreach (var doctor in Doctors)
            {
                <MudSelectItem Value="@doctor.Id">@doctor.Name (@doctor.Specialty)</MudSelectItem>
            }
        </MudSelect>

        <!-- Calendário -->
        @if (SelectedDoctorId > 0)
        {
            <MudDatePicker 
                T="DateTime?"
                Date="@SelectedDate"
                DateChanged="OnDateChanged"
                Label="Select a Date"
                Color="Color.Primary"
                MinDate="@MinDate"
                MaxDate="@MaxDate"
                DisableToolbar="false"
                DisabledDates="IsDateDisabled" />
        }

        <!-- Dropdown de Horários -->
        @if (SelectedDate != null && AvailableTimes.Any())
        {
            <MudSelect T="TimeSpan" 
                       Label="Select a Time" 
                       Color="Color.Primary" 
                       Dense="true" 
                       @bind-Value="SelectedTime">
                <MudSelectItem Value="@TimeSpan.Zero" Disabled="true">Select a Time</MudSelectItem>
                @foreach (var time in AvailableTimes)
                {
                    <MudSelectItem Value="@time">@time.ToString(@"hh\:mm")</MudSelectItem>
                }
            </MudSelect>
        }

        <!-- Botão para Confirmar -->
        <MudButton Disabled="@(!CanSchedule)" 
                   Class="mt-4" 
                   Variant="Variant.Filled" 
                   Color="Color.Success" 
                   OnClick="ScheduleAppointment">
            Schedule Appointment
        </MudButton>
    }
    else if (IsCheckingPatient)
    {
        <MudText Typo="Typo.body1" Class="mt-4" Color="Color.Warning">
            Patient not found. Please register first.
        </MudText>
    }
</MudContainer>

@code {

    [Parameter]
    public int? AppointmentId { get; set; }
    private string PatientEmail = string.Empty;
    private Patient? Patient = null;
    private bool IsCheckingPatient = false;

    private List<Doctor> Doctors = new();
    private int SelectedDoctorId = 0;
    private List<DateTime> AvailableDates = new();
    private List<TimeSpan> AvailableTimes = new();
    private DateTime? SelectedDate;
    private TimeSpan SelectedTime;

    private bool CanSchedule => 
        SelectedDoctorId > 0 && 
        SelectedDate != null && 
        SelectedTime != TimeSpan.Zero && 
        Patient != null;

    private DateTime MinDate = DateTime.Today;
    private DateTime MaxDate = DateTime.Today.AddDays(7);

    protected override async Task OnInitializedAsync()
    {
        Doctors = (await AppointmentService.GetDoctorsAsync()).ToList();

        if (AppointmentId.HasValue)
        {
            var appointment = await AppointmentService.GetAppointmentByIdAsync(AppointmentId.Value);
            if (appointment != null)
            {
                PatientEmail = appointment.Patient.Email;
                Patient = appointment.Patient;
                SelectedDoctorId = appointment.DoctorId;
                SelectedDate = appointment.DateTime.Date;
                SelectedTime = appointment.DateTime.TimeOfDay;

                // Carrega as datas e horários disponíveis para o médico
                await OnDoctorSelected(SelectedDoctorId);
            }
            else
            {
                Snackbar.Add("Appointment not found.", Severity.Error);
            }
        }
    }

    private async Task CheckPatient()
    {
        IsCheckingPatient = true;
        Patient = await PatientService.GetPatientByEmailAsync(PatientEmail);

        if (Patient == null)
        {
            Snackbar.Add("Patient not found. Please register first.", Severity.Warning);
        }
        else
        {
            Snackbar.Add($"Welcome back, {Patient.Name}!", Severity.Success);
        }

        StateHasChanged();
    }


    private async Task OnDoctorSelected(int value)
    {
        SelectedDoctorId = value;
        SelectedDate = null;
        AvailableTimes = new List<TimeSpan>();

        var availableDates = await AppointmentService.GetAvailableDatesAsync(SelectedDoctorId);
        AvailableDates = availableDates
            .Select(d => d.Date)
            .Distinct()
            .ToList();

        StateHasChanged();
    }

    private bool IsDateDisabled(DateTime date)
    {
        return !AvailableDates.Contains(date.Date);
    }

    private async Task OnDateChanged(DateTime? date)
    {
        if (date == null || SelectedDoctorId == 0)
        {
            AvailableTimes = new List<TimeSpan>();
            return;
        }

        SelectedDate = date;

        var availableDates = await AppointmentService.GetAvailableDatesAsync(SelectedDoctorId);

        AvailableTimes = availableDates
            .Where(d => d.Date.Date == SelectedDate.Value.Date)
            .Select(d => d.TimeOfDay)
            .Distinct()
            .OrderBy(t => t)
            .ToList();

        StateHasChanged();
    }

    private async Task ScheduleAppointment()
    {
        try
        {
            var appointment = new Appointment
            {
                DoctorId = SelectedDoctorId,
                PatientId = Patient!.Id, // Paciente identificado pelo email
                DateTime = SelectedDate.Value.Date.Add(SelectedTime)
            };

            await AppointmentService.ScheduleAppointment(appointment);

            Snackbar.Add($"Appointment scheduled successfully with Doctor ID: {SelectedDoctorId} on {SelectedDate.Value:MMMM dd, yyyy} at {SelectedTime:hh\\:mm}!", Severity.Success);

            // Reseta os campos após o agendamento
            SelectedDoctorId = 0;
            SelectedDate = null;
            SelectedTime = TimeSpan.Zero;
            AvailableDates.Clear();
            AvailableTimes.Clear();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error scheduling appointment: {ex.Message}", Severity.Error);
        }
    }

}
